{"version":3,"sources":["components/NavBar.tsx","components/ChartWeather.tsx","pages/TodayPage.tsx","pages/TwoDaysPage.tsx","pages/SevenDaysPage.tsx","loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","updateGps","errorInputFun","ref","useRef","className","to","onClick","bind","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","placeholder","event","preventDefault","fetch","current","value","process","then","res","json","result","cod","console","log","coord","error","catch","ChartWeather","labels","opt","time","data","chartRef","useEffect","ctx","options","map","val","date","Date","hours","getHours","minutes","getMinutes","step","substr","datasets","label","title","borderColor","backgroundColor","display","fontColor","text","legend","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","yLabel","gridLines","color","xAxes","xLabel","Chart","TodayPage","items","temp","toFixed","src","weather","icon","alt","description","toUpperCase","wind_speed","humidity","minutely","precipitation","dt","TwoDaysPage","hourly","pop","SevenDaysPage","daily","day","i","toLocaleDateString","min","max","Loading","props","JSON","stringify","isLoaded","path","App","useState","setError","setIsLoaded","setItems","errorInput","setErrorInput","gps","setGps","newGps","reset","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","setTimeout","style","position","role","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67315ac9.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { ICoordinates } from '../interfaces/coordinates';\n\ntype NavBarProps = {\n  updateGps: (newGps: ICoordinates | null) => void,\n  errorInputFun: () => void\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ updateGps, errorInputFun }) => {\n  const ref = useRef<HTMLInputElement>(null)\n\n  const submit = (event: React.MouseEvent) => {\n    event.preventDefault();\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ref.current!.value}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          // console.log(result)\n          if (result.cod === 200) {\n            console.log(result.coord)\n            updateGps(result.coord)\n          } else {\n            errorInputFun()\n          }\n        },\n        error => {\n          errorInputFun()\n        }\n      )\n      .catch(errorInputFun)\n  }\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top\">\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\" onClick={updateGps.bind(null, null, true)}>Weather</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Сегодня</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/2-days\">2 дня</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/7-days\">7 дней</Link>\n            </li>\n          </ul>\n          <form className=\"d-flex ms-auto \">\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" ref={ref} />\n            <button className=\"btn btn-outline-success\" type=\"submit\" onClick={submit}>Search</button>\n          </form>\n        </div>\n      </div>\n    </nav>\n  )\n}","import React, { useEffect, useRef } from 'react';\n\nimport { Chart, ChartConfiguration } from 'chart.js';\n\ntype ChartWeatherProps = {\n  labels: {\n    title: string,\n    xLabel: string,\n    yLabel: string\n  },\n  opt: {\n    beginAtZero: boolean,\n    step: number\n  }\n  time: number[],\n  data: number[]\n}\n\nexport const ChartWeather: React.FC<ChartWeatherProps> = ({ labels, opt, time, data }) => {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const ctx = chartRef.current;\n    if (ctx) {\n      const options: ChartConfiguration = {\n        type: 'line',\n        data: {\n          labels: time.map(val => {\n            let date = new Date(val * 1000);\n            let hours = date.getHours();\n            let minutes = \"0\" + date.getMinutes();\n            if (date.getMinutes() % opt.step === 0)\n              return `${hours}:${minutes.substr(-2)}`\n            else\n              return ''\n          }),\n          datasets: [{\n            label: labels.title,\n            data: data,\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.5)'\n          }]\n        },\n        options: {\n          title: {\n            display: true,\n            fontColor: \"white\",\n            text: labels.title\n          },\n          legend: {\n            display: false\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: opt.beginAtZero,\n                fontColor: 'white'\n              },\n              scaleLabel: {\n                display: true,\n                labelString: labels.yLabel,\n                fontColor: 'white'\n              },\n              gridLines: {\n                color: 'white'\n              }\n            }],\n            xAxes: [{\n              ticks: {\n                fontColor: 'white'\n              },\n              scaleLabel: {\n                display: true,\n                labelString: labels.xLabel,\n                fontColor: 'white'\n              },\n              gridLines: {\n                color: 'white'\n              }\n            }]\n          }\n        }\n      };\n      new Chart(ctx!, options);\n    }\n  })\n\n  return (\n    <canvas ref={chartRef}></canvas>\n  )\n}","import React from 'react';\n\nimport { ChartWeather } from \"../components/ChartWeather\";\nimport { IWeather } from \"../interfaces/weather\";\n\ntype TodayPageProps = {\n  items: null | IWeather\n}\n\nexport const TodayPage: React.FC<TodayPageProps> = ({ items }) => {\n  return (\n    <>\n      <div className='row text-center'>\n        <div className='col card1'>\n          <div className='temperature-text'>Температура</div>\n          {/* <br /> */}\n          <div className='temperature-val'>{(items!.current.temp - 273).toFixed(1)} °C</div>\n        </div>\n        <div className='col-auto card1'>\n          <img\n            src={`http://openweathermap.org/img/wn/${items!.current.weather[0].icon}@4x.png`}\n            alt='Сдесь была картинка'\n          />\n          <div>{items!.current.weather[0].description.toUpperCase()}</div>\n        </div>\n        <div className='col card1'>\n          <div className='wind_speed-text'>Максимальная скорость ветра</div>\n          <div className='wind_speed-val'>\n            {items!.current.wind_speed} м/с\n                </div>\n        </div>\n        <div className='col card1'>\n          <div className='humidity-text'>Влажность</div>\n          <div className='humidity-val'>\n            {items!.current.humidity} %\n                </div>\n        </div>\n      </div>\n      {\n        'minutely' in items!\n          ? <ChartWeather\n            labels={{\n              title: \"Осадки на ближайший час\",\n              xLabel: \"Время\",\n              yLabel: \"Осадки, мм\",\n            }}\n            opt={{\n              beginAtZero: true,\n              step: 5\n            }}\n            data={items!.minutely.map(val => val.precipitation)}\n            time={items!.minutely.map(val => val.dt)}\n          />\n          : \"Ой! Невозможно отобразить минутный прогноз для данного местоположения\"\n      }\n    </>\n  )\n}\n","import React from 'react';\nimport { ChartWeather } from '../components/ChartWeather';\nimport { IWeather } from '../interfaces/weather';\n\ntype TwoDaysPageProps = {\n  items: IWeather\n}\n\nexport const TwoDaysPage: React.FC<TwoDaysPageProps> = ({ items }) => {\n  let time = items.hourly.map(val => val.dt);\n  return (\n    <div className='row row-cols-2'>\n      <div className='col'>\n        <ChartWeather\n          time={time}\n          data={items.hourly.map(val => +(val.temp - 273).toFixed(1))}\n          opt={{\n            beginAtZero: false,\n            step: 30\n          }}\n          labels={{\n            title: 'Температура за 2 дня',\n            xLabel: 'Время',\n            yLabel: 'Температура, °C'\n          }}\n        />\n      </div>\n      <div className='col'>\n        <ChartWeather\n          time={time}\n          data={items.hourly.map(val => val.pop)}\n          opt={{\n            beginAtZero: true,\n            step: 30\n          }}\n          labels={{\n            title: 'Вероятность выпадения осадков',\n            xLabel: 'Время',\n            yLabel: '%'\n          }}\n        />\n      </div>\n      <div className='col'>\n        <ChartWeather\n          time={time}\n          data={items.hourly.map(val => val.wind_speed)}\n          opt={{\n            beginAtZero: true,\n            step: 30\n          }}\n          labels={{\n            title: 'Скорость ветра',\n            xLabel: 'Время',\n            yLabel: 'м/с'\n          }}\n        />\n      </div>\n      <div className='col'>\n        <ChartWeather\n          time={time}\n          data={items.hourly.map(val => val.humidity)}\n          opt={{\n            beginAtZero: true,\n            step: 30\n          }}\n          labels={{\n            title: 'Влажность',\n            xLabel: 'Время',\n            yLabel: '%'\n          }}\n        />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { IWeather } from '../interfaces/weather';\n\ntype SevenDaysPageProps = {\n  items: IWeather\n}\n\n// const printDate: string = (dt: number) => {\n//   const date = new Date(dt * 1000);\n//   return date.toLocaleDateString();\n// }\n\nexport const SevenDaysPage: React.FC<SevenDaysPageProps> = ({ items }) => {\n  return (\n    <ul className='row row-cols-5 justify-content-evenly'>\n      {items.daily.map((day, i) => {\n        return (\n          <li className='col card1 text-center' key={i}>\n            <div>{new Date(day.dt * 1000).toLocaleDateString()}</div>\n            <img\n              src={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n              alt='Сдесь была картинка'\n            />\n            <div>{day.weather[0].description.toUpperCase()}</div>\n            <div>{`от ${(day.temp.min - 273).toFixed(1)}°C до ${(day.temp.max - 273).toFixed(1)}°C`}</div>\n            <div>Вероятность осадков: {day.pop}%</div>\n            <div>Скорость ветра: {day.wind_speed} м/с</div>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n","import React from 'react';\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport { TodayPage } from \"./pages/TodayPage\";\nimport { TwoDaysPage } from \"./pages/TwoDaysPage\";\nimport { SevenDaysPage } from \"./pages/SevenDaysPage\";\nimport { IWeather } from './interfaces/weather';\n\ntype TodayPageProps = {\n    error: null | Object,\n    isLoaded: boolean,\n    items: null | IWeather\n}\n\nexport const Loading: React.FC<TodayPageProps> = (props) => {\n    if (props.error) {\n        return <div>Ошибка: {JSON.stringify(props.error)}</div>;\n    } else if (!props.isLoaded || props.items == null) {\n        return <div>Загрузка...</div>;\n    } else {\n        return (\n            <Switch>\n                <Route path=\"/7-days\">\n                    <SevenDaysPage items={props.items} />\n                </Route>\n                <Route path=\"/2-days\">\n                    <TwoDaysPage items={props.items!}/>\n                </Route>\n                <Route path=\"/\">\n                    <TodayPage items={props.items!} />\n                </Route>\n            </Switch>\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport { NavBar } from \"./components/NavBar\";\n\nimport { IWeather } from \"./interfaces/weather\";\nimport { ICoordinates } from \"./interfaces/coordinates\";\nimport { Loading } from './loading';\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n// let gps: ICoordinates = {\n//   lat: 0,\n//   lon: 0\n// }\n\n// const gps: ICoordinates = {\n//   lat: 55.40,\n//   lon: 12.33\n// }\n\nfunction App() {\n  const [error, setError] = useState<null | Object>(null);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [items, setItems] = useState<null | IWeather>(null);\n\n  const [errorInput, setErrorInput] = useState<boolean>(false)\n\n  const [gps, setGps] = useState<ICoordinates | null>(null);\n\n  const errorInputFun = () => {\n    console.log('dagsdgajsgdjasjdhg')\n    setErrorInput(true);\n    setTimeout(() => setErrorInput(false), 2000)\n  }\n\n  useEffect(() => {\n    updateGps(null)\n  })\n\n  const updateGps = (newGps: ICoordinates | null, reset = false) => {\n    if (!gps || reset) {\n      if (\"geolocation\" in navigator) {\n        console.log(\"Available\");\n        navigator.geolocation.getCurrentPosition((pos) => {\n          setGps({\n            lat: pos.coords.latitude,\n            lon: pos.coords.longitude\n          })\n          console.log(pos.coords);\n        })\n      } else {\n        console.log(\"Not Available\");\n      }\n    } else if (newGps) {\n      setError(null)\n      setIsLoaded(false)\n      setGps({\n        lat: newGps.lat,\n        lon: newGps.lon\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (gps)\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${gps.lat}&lon=${gps.lon}&exclude=&appid=${API_KEY}&lang=ru`)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            console.log(result);\n            setIsLoaded(true);\n            setItems(result);\n          },\n          (error) => {\n            // console.log(\"error\" + typeof error);\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n  }, [gps])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <header className=\"App-header\">\n          <NavBar updateGps={updateGps} errorInputFun={errorInputFun} />\n        </header>\n        <div className=\"alert alert-warning\" style={{ position: 'fixed', display: errorInput ? 'block' : 'none' }} role=\"alert\">\n          Город не найден\n        </div>\n        <div className='container page mt-2'>\n          <Loading error={error} isLoaded={isLoaded} items={items} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}